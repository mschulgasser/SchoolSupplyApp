#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolSupplyApp.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SchoolSuppliesDB")]
	public partial class SchoolSupplyAppDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSupply(Supply instance);
    partial void UpdateSupply(Supply instance);
    partial void DeleteSupply(Supply instance);
    partial void InsertFamily(Family instance);
    partial void UpdateFamily(Family instance);
    partial void DeleteFamily(Family instance);
    partial void InsertListSupply(ListSupply instance);
    partial void UpdateListSupply(ListSupply instance);
    partial void DeleteListSupply(ListSupply instance);
    partial void InsertSchool(School instance);
    partial void UpdateSchool(School instance);
    partial void DeleteSchool(School instance);
    partial void InsertList(List instance);
    partial void UpdateList(List instance);
    partial void DeleteList(List instance);
    partial void InsertChildren(Children instance);
    partial void UpdateChildren(Children instance);
    partial void DeleteChildren(Children instance);
    #endregion
		
		public SchoolSupplyAppDataContext() : 
				base(global::SchoolSupplyApp.Data.Properties.Settings.Default.SchoolSuppliesDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolSupplyAppDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolSupplyAppDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolSupplyAppDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolSupplyAppDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Supply> Supplies
		{
			get
			{
				return this.GetTable<Supply>();
			}
		}
		
		public System.Data.Linq.Table<Family> Families
		{
			get
			{
				return this.GetTable<Family>();
			}
		}
		
		public System.Data.Linq.Table<ListSupply> ListSupplies
		{
			get
			{
				return this.GetTable<ListSupply>();
			}
		}
		
		public System.Data.Linq.Table<School> Schools
		{
			get
			{
				return this.GetTable<School>();
			}
		}
		
		public System.Data.Linq.Table<List> Lists
		{
			get
			{
				return this.GetTable<List>();
			}
		}
		
		public System.Data.Linq.Table<Children> Childrens
		{
			get
			{
				return this.GetTable<Children>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplies")]
	public partial class Supply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ListSupply> _ListSupplies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Supply()
		{
			this._ListSupplies = new EntitySet<ListSupply>(new Action<ListSupply>(this.attach_ListSupplies), new Action<ListSupply>(this.detach_ListSupplies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supply_ListSupply", Storage="_ListSupplies", ThisKey="Id", OtherKey="SupplyId")]
		public EntitySet<ListSupply> ListSupplies
		{
			get
			{
				return this._ListSupplies;
			}
			set
			{
				this._ListSupplies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ListSupplies(ListSupply entity)
		{
			this.SendPropertyChanging();
			entity.Supply = this;
		}
		
		private void detach_ListSupplies(ListSupply entity)
		{
			this.SendPropertyChanging();
			entity.Supply = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Families")]
	public partial class Family : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Children> _Childrens;
		
		private EntitySet<Children> _Childrens1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Family()
		{
			this._Childrens = new EntitySet<Children>(new Action<Children>(this.attach_Childrens), new Action<Children>(this.detach_Childrens));
			this._Childrens1 = new EntitySet<Children>(new Action<Children>(this.attach_Childrens1), new Action<Children>(this.detach_Childrens1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_Children", Storage="_Childrens", ThisKey="Id", OtherKey="FamilyId")]
		public EntitySet<Children> Childrens
		{
			get
			{
				return this._Childrens;
			}
			set
			{
				this._Childrens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_Children1", Storage="_Childrens1", ThisKey="Id", OtherKey="FamilyId")]
		public EntitySet<Children> Childrens1
		{
			get
			{
				return this._Childrens1;
			}
			set
			{
				this._Childrens1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Childrens(Children entity)
		{
			this.SendPropertyChanging();
			entity.Family = this;
		}
		
		private void detach_Childrens(Children entity)
		{
			this.SendPropertyChanging();
			entity.Family = null;
		}
		
		private void attach_Childrens1(Children entity)
		{
			this.SendPropertyChanging();
			entity.Family1 = this;
		}
		
		private void detach_Childrens1(Children entity)
		{
			this.SendPropertyChanging();
			entity.Family1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListSupply")]
	public partial class ListSupply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplyId;
		
		private int _ListId;
		
		private int _Quantity;
		
		private EntityRef<Supply> _Supply;
		
		private EntityRef<List> _List;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplyIdChanging(int value);
    partial void OnSupplyIdChanged();
    partial void OnListIdChanging(int value);
    partial void OnListIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public ListSupply()
		{
			this._Supply = default(EntityRef<Supply>);
			this._List = default(EntityRef<List>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplyId
		{
			get
			{
				return this._SupplyId;
			}
			set
			{
				if ((this._SupplyId != value))
				{
					if (this._Supply.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplyIdChanging(value);
					this.SendPropertyChanging();
					this._SupplyId = value;
					this.SendPropertyChanged("SupplyId");
					this.OnSupplyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ListId
		{
			get
			{
				return this._ListId;
			}
			set
			{
				if ((this._ListId != value))
				{
					if (this._List.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnListIdChanging(value);
					this.SendPropertyChanging();
					this._ListId = value;
					this.SendPropertyChanged("ListId");
					this.OnListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supply_ListSupply", Storage="_Supply", ThisKey="SupplyId", OtherKey="Id", IsForeignKey=true)]
		public Supply Supply
		{
			get
			{
				return this._Supply.Entity;
			}
			set
			{
				Supply previousValue = this._Supply.Entity;
				if (((previousValue != value) 
							|| (this._Supply.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supply.Entity = null;
						previousValue.ListSupplies.Remove(this);
					}
					this._Supply.Entity = value;
					if ((value != null))
					{
						value.ListSupplies.Add(this);
						this._SupplyId = value.Id;
					}
					else
					{
						this._SupplyId = default(int);
					}
					this.SendPropertyChanged("Supply");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="List_ListSupply", Storage="_List", ThisKey="ListId", OtherKey="Id", IsForeignKey=true)]
		public List List
		{
			get
			{
				return this._List.Entity;
			}
			set
			{
				List previousValue = this._List.Entity;
				if (((previousValue != value) 
							|| (this._List.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._List.Entity = null;
						previousValue.ListSupplies.Remove(this);
					}
					this._List.Entity = value;
					if ((value != null))
					{
						value.ListSupplies.Add(this);
						this._ListId = value.Id;
					}
					else
					{
						this._ListId = default(int);
					}
					this.SendPropertyChanged("List");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schools")]
	public partial class School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _AdminFirstName;
		
		private string _AdminLastName;
		
		private string _Email;
		
		private string _PasswordSalt;
		
		private string _PasswordHash;
		
		private EntitySet<List> _Lists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAdminFirstNameChanging(string value);
    partial void OnAdminFirstNameChanged();
    partial void OnAdminLastNameChanging(string value);
    partial void OnAdminLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    #endregion
		
		public School()
		{
			this._Lists = new EntitySet<List>(new Action<List>(this.attach_Lists), new Action<List>(this.detach_Lists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminFirstName
		{
			get
			{
				return this._AdminFirstName;
			}
			set
			{
				if ((this._AdminFirstName != value))
				{
					this.OnAdminFirstNameChanging(value);
					this.SendPropertyChanging();
					this._AdminFirstName = value;
					this.SendPropertyChanged("AdminFirstName");
					this.OnAdminFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminLastName
		{
			get
			{
				return this._AdminLastName;
			}
			set
			{
				if ((this._AdminLastName != value))
				{
					this.OnAdminLastNameChanging(value);
					this.SendPropertyChanging();
					this._AdminLastName = value;
					this.SendPropertyChanged("AdminLastName");
					this.OnAdminLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_List", Storage="_Lists", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<List> Lists
		{
			get
			{
				return this._Lists;
			}
			set
			{
				this._Lists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lists(List entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_Lists(List entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lists")]
	public partial class List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Grade;
		
		private int _SchoolId;
		
		private EntitySet<ListSupply> _ListSupplies;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public List()
		{
			this._ListSupplies = new EntitySet<ListSupply>(new Action<ListSupply>(this.attach_ListSupplies), new Action<ListSupply>(this.detach_ListSupplies));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="List_ListSupply", Storage="_ListSupplies", ThisKey="Id", OtherKey="ListId")]
		public EntitySet<ListSupply> ListSupplies
		{
			get
			{
				return this._ListSupplies;
			}
			set
			{
				this._ListSupplies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_List", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.Lists.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.Lists.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ListSupplies(ListSupply entity)
		{
			this.SendPropertyChanging();
			entity.List = this;
		}
		
		private void detach_ListSupplies(ListSupply entity)
		{
			this.SendPropertyChanging();
			entity.List = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Children")]
	public partial class Children : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FamilyId;
		
		private string _Name;
		
		private string _Grade;
		
		private int _SchoolId;
		
		private EntityRef<Family> _Family;
		
		private EntityRef<Family> _Family1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFamilyIdChanging(int value);
    partial void OnFamilyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Children()
		{
			this._Family = default(EntityRef<Family>);
			this._Family1 = default(EntityRef<Family>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyId", DbType="Int NOT NULL")]
		public int FamilyId
		{
			get
			{
				return this._FamilyId;
			}
			set
			{
				if ((this._FamilyId != value))
				{
					if ((this._Family.HasLoadedOrAssignedValue || this._Family1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFamilyIdChanging(value);
					this.SendPropertyChanging();
					this._FamilyId = value;
					this.SendPropertyChanged("FamilyId");
					this.OnFamilyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_Children", Storage="_Family", ThisKey="FamilyId", OtherKey="Id", IsForeignKey=true)]
		public Family Family
		{
			get
			{
				return this._Family.Entity;
			}
			set
			{
				Family previousValue = this._Family.Entity;
				if (((previousValue != value) 
							|| (this._Family.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Family.Entity = null;
						previousValue.Childrens.Remove(this);
					}
					this._Family.Entity = value;
					if ((value != null))
					{
						value.Childrens.Add(this);
						this._FamilyId = value.Id;
					}
					else
					{
						this._FamilyId = default(int);
					}
					this.SendPropertyChanged("Family");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_Children1", Storage="_Family1", ThisKey="FamilyId", OtherKey="Id", IsForeignKey=true)]
		public Family Family1
		{
			get
			{
				return this._Family1.Entity;
			}
			set
			{
				Family previousValue = this._Family1.Entity;
				if (((previousValue != value) 
							|| (this._Family1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Family1.Entity = null;
						previousValue.Childrens1.Remove(this);
					}
					this._Family1.Entity = value;
					if ((value != null))
					{
						value.Childrens1.Add(this);
						this._FamilyId = value.Id;
					}
					else
					{
						this._FamilyId = default(int);
					}
					this.SendPropertyChanged("Family1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
